<?php

namespace AppBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * ProgramTypeChoiceRuleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProgramTypeChoiceRuleRepository extends EntityRepository {

    /**
     * This function returns desired intake and program of interest based on program type id.
     * 
     * @param integer $programTypeId
     * @return array The array of program of interest and desired intake
     */
    public function getDiPibyPt($programTypeId) {
        $em = $this->getEntityManager();
        //get the unique set of ProgramTypeChoiceRule objects based on program_type_id
        $programOfInterest = $em->getRepository('AppBundle:ProgramTypeChoiceRule')
                ->findBy(array('programtype' => $programTypeId, 'enabled' => 1));
        //initialize the two dimensional $final array
        $final = array('pi' => array(), 'di' => array());
        //loop through the ProgramTypeChoiceRule objects one by one
        foreach ($programOfInterest as $prog) {
            //get the ProgramOfInterest object based on the programofinterest value
            $pi = $em->getRepository('AppBundle:ProgramOfInterest')
                    ->findOneBy(array('id' => $prog->getProgramofinterest()->getId(), 'enabled' => 1));
            if (empty($pi)) {
                continue;
            }
            //get the DesiredIntaket object based on the desiredintake value
            $di = $em->getRepository('AppBundle:DesiredIntake')
                    ->findOneBy(array('id' => $prog->getDesiredintake()->getId(), 'enabled' => 1));
            if (empty($di)) {
                continue;
            }
            //populate the $final['pi'] array with pi object's Id as key and description as value
            $final['pi'][$pi->getId()] = $pi->getDescription();
            //populate the $final['di'] array with di object's Id as key and description as value
            $final['di'][$di->getId()] = $di->getDescription();
        }
        return $final;
    }

    /**
     * This function gets the Desired Intake based on given program of interest id.
     * @param integer $programOfInterestId
     * @return array $final array of Desired Intake
     */
    public function getDibyPi($programOfInterestId) {

        $em = $this->getEntityManager();
        $desiredIntake = $em->getRepository('AppBundle:ProgramTypeChoiceRule')
                ->findBy(array('programofinterest' => $programOfInterestId, 'enabled' => 1));
        //initialize the $final array
        $final = array();
        //loop through ProgramTypeChoiceRule objects one by one
        foreach ($desiredIntake as $des) {
            //get the DesiredIntake objects based on desiredintake value
            $di = $em->getRepository('AppBundle:DesiredIntake')
                    ->findOneBy(array('id' => $des->getDesiredintake()->getId(), 'enabled' => 1));
            if (empty($di)) {
                continue;
            }
            //populate the $final array with di object's Id as key and description as value
            $final[$di->getId()] = $di->getDescription();
        }
        return $final;
    }

    /**
     * This function returns the Intake Year based on program type, program of interest & desired intake id.
     * @param integer $programTypeId
     * @param integer $programOfInterestId
     * @param integer $desiredIntakeId
     * @return Object IntakeYear 
     */
    public function getYearbyDi($programTypeId, $programOfInterestId, $desiredIntakeId) {
        $em = $this->getEntityManager();
        $desiredIntake = $em->getRepository('AppBundle:ProgramTypeChoiceRule')
                ->findOneBy(array('programofinterest' => $programOfInterestId, 'programtype' => $programTypeId, 'desiredintake' => $desiredIntakeId, 'enabled' => 1));
        $intakeYear = $em->getRepository('AppBundle:IntakeYear')
                ->findOneBy(array('id' => $desiredIntake->getId()));
        return $intakeYear;
    }

    /**
     * This function returns intake year based on selected candidate on profile page.
     * @param Candidate Object $selectedcandidate
     * @return IntakeYear Object $intakeYear
     */
    public function getProfileYearbySelectedCandidate($selectedcandidate) {
        $em = $this->getEntityManager();
        //get the program_type_id of the selectedcandidate object
        $programTypeId = $selectedcandidate->getProgramtype()->getId();
        $programOfInterestId = $selectedcandidate->getProgramofinterest()->getId();
        $desiredIntakeId = $selectedcandidate->getDesiredintake()->getId();

        $desiredIntake = $em->getRepository('AppBundle:ProgramTypeChoiceRule')
                ->findOneBy(array('programofinterest' => $programOfInterestId, 'programtype' => $programTypeId, 'desiredintake' => $desiredIntakeId, 'enabled' => 1));
        $intakeYear = $em->getRepository('AppBundle:IntakeYear')
                ->findOneBy(array('id' => $desiredIntake->getId()));

        return $intakeYear;
    }

    /**
     * This function returns Program of interest and desired intake based on selected candidate on profile page.
     * @param Candidate Object $selectedcandidate
     * @return array $final
     */
    public function getProfilePiDibySelectedCandidate($selectedcandidate) {
        $em = $this->getEntityManager();
        $final = array('pi' => array(), 'di' => array());
        $programTypeId = $selectedcandidate->getProgramtype()->getId();
        $programOfInterest = $em->getRepository('AppBundle:ProgramTypeChoiceRule')
                ->findBy(array('programtype' => $programTypeId, 'enabled' => 1));
        //loop through ProgramTypeChoiceRule objects one by one
        foreach ($programOfInterest as $prog) {
            //get the ProgramOfInterest objects based on programofinterest value
            $pi = $em->getRepository('AppBundle:ProgramOfInterest')
                    ->findOneBy(array('id' => $prog->getProgramofinterest()->getId(), 'enabled' => 1));
            if (empty($pi)) {
                continue;
            }
            //populate the $final['pi'] array with pi object's id as key and description as value
            $final['pi'][$pi->getId()] = $pi->getDescription();
            //get the selected programofinterest and save it in $final['pi'] array with key 'piselected'
            $final['pi']['piselected'] = $selectedcandidate->getProgramofinterest()->getId();
        }
        //get the program_of_interest_id of the selectedcandidate object
        $programOfInterestId = $selectedcandidate->getProgramofinterest()->getId();
        //get the ProgramTypeChoiceRule objects based on the programofinterestid value
        $desiredIntake = $em->getRepository('AppBundle:ProgramTypeChoiceRule')
                ->findBy(array('programofinterest' => $programOfInterestId, 'enabled' => 1));
        //loop through ProgramTypeChoiceRule objects one by one
        foreach ($desiredIntake as $des) {
            //get the DesiredIntake objects based on desiredintake value
            $di = $em->getRepository('AppBundle:DesiredIntake')
                    ->findOneBy(array('id' => $des->getDesiredintake()->getId(), 'enabled' => 1));
            if (empty($di)) {
                continue;
            }
            //populate the $final['di'] array with di object's id as key and description as value
            $final['di'][$di->getId()] = $di->getDescription();
            //get the selected desiredintake and save it in $final['di'] array with key 'diselected'
            $final['di']['diselected'] = $selectedcandidate->getDesiredintake()->getId();
        }
        return $final;
    }

    /**
     * This function returns Program of interest and desired intake based on program type id on profile page.
     * @param integer $programTypeId
     * @return array $final
     */
    public function getProfilePiDibyPt($programTypeId) {
        $em = $this->getEntityManager();
        //get the ProgramTypeChoiceRule objects based on the programtypeid value
        $programOfInterest = $em->getRepository('AppBundle:ProgramTypeChoiceRule')
                ->findBy(array('programtype' => $programTypeId, 'enabled' => 1));
        //initialize the two dimensional $final array
        $final = array('pi' => array(), 'di' => array());
        //loop through ProgramTypeChoiceRule objects one by one
        foreach ($programOfInterest as $prog) {
            //get the ProgramOfInterest objects based on programofinterest value
            $pi = $em->getRepository('AppBundle:ProgramOfInterest')
                    ->findOneBy(array('id' => $prog->getProgramofinterest()->getId(), 'enabled' => 1));
            if (empty($pi)) {
                continue;
            }
            //get the DesiredIntake objects based on desiredintake value
            $di = $em->getRepository('AppBundle:DesiredIntake')
                    ->findOneBy(array('id' => $prog->getDesiredintake()->getId(), 'enabled' => 1));
            if (empty($di)) {
                continue;
            }
            //populate the $final['pi'] array with pi object's id as key and description as value
            $final['pi'][$pi->getId()] = $pi->getDescription();
            //populate the $final['di'] array with di object's id as key and description as value
            $final['di'][$di->getId()] = $di->getDescription();
        }
        return $final;
    }

    /**
     * This function returns desired intake based on program of interest id on profile page.
     * @param integer $programOfInterestId
     * @return array $final
     */
    public function getProfileDibyPi($programOfInterestId) {
        $em = $this->getEntityManager();
        //get the ProgramTypeChoiceRule objects based on programofinterestid value
        $desiredIntake = $em->getRepository('AppBundle:ProgramTypeChoiceRule')
                ->findBy(array('programofinterest' => $programOfInterestId, 'enabled' => 1));
        //initialize the $final array
        $final = array();
        //loop through ProgramTypeChoiceRule objects one by one
        foreach ($desiredIntake as $des) {
            //get the DesiredIntake objects based on desiredintake value
            $di = $em->getRepository('AppBundle:DesiredIntake')
                    ->findOneBy(array('id' => $des->getDesiredintake()->getId(), 'enabled' => 1));
            if (empty($di)) {
                continue;
            }
            //populate the $final array with di object's id as key and description as value
            $final[$di->getId()] = $di->getDescription();
        }
        return $final;
    }

    /**
     * This function returns intake year based on program type, program of interest and desired intake id on profile page.
     * @param integer $programTypeId
     * @param integer $programOfInterestId
     * @param integer $desiredIntakeId
     * @return IntakeYear Object $intakeYear
     */
    public function getProfileIntakeYearbyDiPiPt($programTypeId, $programOfInterestId, $desiredIntakeId) {
        $em = $this->getEntityManager();
        $selectedIntakeYear = $em->getRepository('AppBundle:ProgramTypeChoiceRule')
                ->findOneBy(array('programofinterest' => $programOfInterestId, 'programtype' => $programTypeId, 'desiredintake' => $desiredIntakeId, 'enabled' => 1));
        $intakeYear = $em->getRepository('AppBundle:IntakeYear')
                ->findOneBy(array('id' => $selectedIntakeYear->getId()));
        return $intakeYear;
    }

}
